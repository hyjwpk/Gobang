var t=this&&this.__awaiter||function(t,i,s,h){return new(s||(s=Promise))((function(n,c){function r(t){try{e(h.next(t))}catch(t){c(t)}}function o(t){try{e(h.throw(t))}catch(t){c(t)}}function e(t){var i;t.done?n(t.value):(i=t.value,i instanceof s?i:new s((function(t){t(i)}))).then(r,o)}e((h=h.apply(t,i||[])).next())}))};import{Chessboard as i}from"../Shapes/Chessboard.js";import{AlphaAI as s}from"../AIs/AlphaAI.js";export class Model{constructor(t,h,n,c){this.currentPlayer="black",this.moves=[],this.gameIsOver=!1,this.chessboard=new i(0,0,t,h,n),this.ai=new s(this.chessboard,c)}putChess(t,i){return!this.gameIsOver&&(!!this.chessboard.putChess(t,i,"black"===this.currentPlayer)&&(this.moves.push({row:t,col:i,isBlack:"black"===this.currentPlayer}),this.checkWin(t,i)&&(this.gameIsOver=!0),this.currentPlayer="black"===this.currentPlayer?"white":"black",!0))}checkWin(t,i){return this.checkDirection(t,i,0,1)||this.checkDirection(t,i,1,0)||this.checkDirection(t,i,1,1)||this.checkDirection(t,i,1,-1)}checkDirection(t,i,s,h){const n="black"===this.currentPlayer;let c=1;return c+=this.countInDirection(t,i,s,h,n),c+=this.countInDirection(t,i,-s,-h,n),c>=5}countInDirection(t,i,s,h,n){let c=0,r=t+s,o=i+h;for(;r>=0&&r<this.chessboard.rows&&o>=0&&o<this.chessboard.cols&&this.chessboard.board[r][o]===n;)c++,r+=s,o+=h;return c}getMove(i){return t(this,void 0,void 0,(function*(){if(this.gameIsOver)return null;return yield this.ai.getMove(i)}))}undoLastMove(){if(!1===this.gameIsOver&&this.moves.length>=2){const t=this.moves.pop();t&&(this.chessboard.board[t.row][t.col]=null,this.ai.undoLastMove(t));const i=this.moves.pop();i&&(this.chessboard.board[i.row][i.col]=null,this.ai.undoLastMove(i))}}}