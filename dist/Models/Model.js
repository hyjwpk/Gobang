import{Chessboard as t}from"../Shapes/Chessboard.js";import{MiniMaxAI as s}from"../AIs/MiniMaxAI.js";export class Model{constructor(i,h,r,e){this.currentPlayer="black",this.moves=[],this.gameIsOver=!1,this.chessboard=new t(0,0,i,h,r),this.ai=new s(this.chessboard,e)}putChess(t,s){return!this.gameIsOver&&(!!this.chessboard.putChess(t,s,"black"===this.currentPlayer)&&(this.moves.push({row:t,col:s,isBlack:"black"===this.currentPlayer}),this.checkWin(t,s)&&(this.gameIsOver=!0),this.currentPlayer="black"===this.currentPlayer?"white":"black",!0))}checkWin(t,s){return this.checkDirection(t,s,0,1)||this.checkDirection(t,s,1,0)||this.checkDirection(t,s,1,1)||this.checkDirection(t,s,1,-1)}checkDirection(t,s,i,h){const r="black"===this.currentPlayer;let e=1;return e+=this.countInDirection(t,s,i,h,r),e+=this.countInDirection(t,s,-i,-h,r),e>=5}countInDirection(t,s,i,h,r){let e=0,n=t+i,c=s+h;for(;n>=0&&n<this.chessboard.rows&&c>=0&&c<this.chessboard.cols&&this.chessboard.board[n][c]===r;)e++,n+=i,c+=h;return e}getMove(t){if(this.gameIsOver)return null;return this.ai.getMove(t)}undoLastMove(){if(!1===this.gameIsOver&&this.moves.length>=2){const t=this.moves.pop();t&&(this.chessboard.board[t.row][t.col]=null,this.ai.undoLastMove(t));const s=this.moves.pop();s&&(this.chessboard.board[s.row][s.col]=null,this.ai.undoLastMove(s))}}}